"""
Syst√®me de migration automatique pour GEC
Permet d'ajouter automatiquement les nouvelles colonnes sans perdre les donn√©es existantes
"""
import logging
import os
from sqlalchemy import text, inspect
from flask import current_app

def check_column_exists(engine, table_name, column_name):
    """V√©rifie si une colonne existe dans une table"""
    try:
        inspector = inspect(engine)
        columns = [col['name'] for col in inspector.get_columns(table_name)]
        return column_name in columns
    except Exception as e:
        logging.warning(f"Impossible de v√©rifier la colonne {column_name} dans {table_name}: {e}")
        return False

def add_column_safely(engine, table_name, column_name, column_definition):
    """Ajoute une colonne de mani√®re s√©curis√©e si elle n'existe pas"""
    try:
        if not check_column_exists(engine, table_name, column_name):
            sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_definition}"
            logging.info(f"Ajout de la colonne {column_name} √† la table {table_name}")
            with engine.connect() as connection:
                connection.execute(text(sql))
                connection.commit()
            return True
        else:
            logging.debug(f"Colonne {column_name} existe d√©j√† dans {table_name}")
            return False
    except Exception as e:
        logging.error(f"Erreur lors de l'ajout de la colonne {column_name}: {e}")
        return False

def check_table_exists(engine, table_name):
    """V√©rifie si une table existe"""
    try:
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        return table_name in tables
    except Exception as e:
        logging.warning(f"Impossible de v√©rifier la table {table_name}: {e}")
        return False

def create_table_safely(engine, table_name, create_sql):
    """Cr√©e une table de mani√®re s√©curis√©e si elle n'existe pas"""
    try:
        if not check_table_exists(engine, table_name):
            logging.info(f"Cr√©ation de la table {table_name}")
            with engine.connect() as connection:
                connection.execute(text(create_sql))
                connection.commit()
            return True
        else:
            logging.debug(f"Table {table_name} existe d√©j√†")
            return False
    except Exception as e:
        logging.error(f"Erreur lors de la cr√©ation de la table {table_name}: {e}")
        return False

def run_automatic_migrations(app, db):
    """
    Ex√©cute toutes les migrations automatiques n√©cessaires
    Cette fonction est appel√©e au d√©marrage de l'application
    """
    logging.info("V√©rification des migrations automatiques...")
    
    try:
        # Note: Sauvegarde automatique disponible via l'interface web ou manuellement
        # pour √©viter les imports circulaires lors du d√©marrage
        
        engine = db.engine
        migrations_applied = 0
        
        # V√©rifier et cr√©er les tables manquantes si n√©cessaire
        required_tables = {
            'migration_log': '''
                CREATE TABLE migration_log (
                    id SERIAL PRIMARY KEY,
                    migration_name VARCHAR(255) NOT NULL,
                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    version VARCHAR(50)
                )
            ''',
            'system_health': '''
                CREATE TABLE system_health (
                    id SERIAL PRIMARY KEY,
                    check_name VARCHAR(255) NOT NULL,
                    status VARCHAR(50) NOT NULL,
                    last_check TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    details TEXT
                )
            '''
        }
        
        for table_name, create_sql in required_tables.items():
            if create_table_safely(engine, table_name, create_sql):
                migrations_applied += 1
                logging.info(f"‚úì Table {table_name} cr√©√©e")
        
        # Migration 1: Ajouter sendgrid_api_key √† parametres_systeme
        if add_column_safely(engine, 'parametres_systeme', 'sendgrid_api_key', 'VARCHAR(500)'):
            migrations_applied += 1
            logging.info("‚úì Migration: Colonne sendgrid_api_key ajout√©e")
        
        # Migration 2: Futures colonnes pour param√®tres syst√®me (d√©sactiv√©es pour l'instant)
        # Ces colonnes seront ajout√©es quand les fonctionnalit√©s correspondantes seront d√©velopp√©es
        # future_parametres_columns = [
        #     ('notification_templates', 'TEXT'),  # Pour futurs templates de notification
        #     ('backup_settings', 'TEXT'),          # Pour param√®tres de sauvegarde
        #     ('theme_settings', 'TEXT'),           # Pour param√®tres de th√®me
        # ]
        # 
        # for column_name, column_type in future_parametres_columns:
        #     if add_column_safely(engine, 'parametres_systeme', column_name, column_type):
        #         migrations_applied += 1
        #         logging.info(f"‚úì Migration: Colonne {column_name} ajout√©e aux param√®tres")
        
        # Migration 3: Futures colonnes pour utilisateurs (d√©sactiv√©es pour l'instant)
        # Note: 'user' est un mot r√©serv√© en PostgreSQL, utiliser des guillemets si n√©cessaire
        # future_user_columns = [
        #     ('avatar_url', 'VARCHAR(500)'),      # Pour avatars utilisateurs
        #     ('last_activity', 'TIMESTAMP'),      # Pour suivi d'activit√©
        #     ('preferences', 'TEXT'),             # Pour pr√©f√©rences utilisateur
        # ]
        # 
        # for column_name, column_type in future_user_columns:
        #     if add_column_safely(engine, '"user"', column_name, column_type):  # Guillemets pour PostgreSQL
        #         migrations_applied += 1
        #         logging.info(f"‚úì Migration: Colonne {column_name} ajout√©e aux utilisateurs")
        
        # Migration 3: V√©rification des colonnes critiques
        critical_columns = [
            ('parametres_systeme', 'email_provider', 'VARCHAR(20) DEFAULT \'sendgrid\''),
            ('parametres_systeme', 'notify_superadmin_new_mail', 'BOOLEAN DEFAULT 1'),
            ('parametres_systeme', 'titre_responsable_structure', 'VARCHAR(100) DEFAULT \'Secr√©taire G√©n√©ral\''),
        ]
        
        for table, column, definition in critical_columns:
            if add_column_safely(engine, table, column, definition):
                migrations_applied += 1
                logging.info(f"‚úì Migration: Colonne critique {column} ajout√©e √† {table}")
        
        # Migration 4: Ajout des colonnes pour les pi√®ces jointes dans les transmissions
        forward_attachment_columns = [
            ('courrier_forward', 'attached_file', 'VARCHAR(255)'),
            ('courrier_forward', 'attached_file_original_name', 'VARCHAR(255)'),
            ('courrier_forward', 'attached_file_size', 'INTEGER'),
        ]
        
        for table, column, definition in forward_attachment_columns:
            if add_column_safely(engine, table, column, definition):
                migrations_applied += 1
                logging.info(f"‚úì Migration: Colonne de pi√®ce jointe {column} ajout√©e √† {table}")
        
        if migrations_applied > 0:
            logging.info(f"üîÑ {migrations_applied} migration(s) automatique(s) appliqu√©e(s) avec succ√®s")
            # Commit les changements
            db.session.commit()
        else:
            logging.info("‚úÖ Aucune migration n√©cessaire - Base de donn√©es √† jour")
            
    except Exception as e:
        logging.error(f"‚ùå Erreur lors des migrations automatiques: {e}")
        # En cas d'erreur, on ne fait pas crasher l'application
        pass

def create_migration_table(engine):
    """Cr√©e une table pour tracker les migrations appliqu√©es (pour usage future)"""
    try:
        sql = """
        CREATE TABLE IF NOT EXISTS migration_log (
            id INTEGER PRIMARY KEY,
            migration_name VARCHAR(255) NOT NULL,
            applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            success BOOLEAN DEFAULT 1
        )
        """
        with engine.connect() as connection:
            connection.execute(text(sql))
            connection.commit()
        logging.debug("Table migration_log cr√©√©e/v√©rifi√©e")
    except Exception as e:
        logging.warning(f"Impossible de cr√©er la table migration_log: {e}")

def log_migration(engine, migration_name, success=True):
    """Enregistre une migration dans le log (pour usage future)"""
    try:
        sql = """
        INSERT INTO migration_log (migration_name, success) 
        VALUES (:migration_name, :success)
        """
        with engine.connect() as connection:
            connection.execute(text(sql), {"migration_name": migration_name, "success": success})
            connection.commit()
        logging.debug(f"Migration {migration_name} enregistr√©e dans le log")
    except Exception as e:
        logging.warning(f"Impossible d'enregistrer la migration {migration_name}: {e}")

def get_database_type():
    """D√©termine le type de base de donn√©es (SQLite ou PostgreSQL)"""
    database_url = os.environ.get("DATABASE_URL", "sqlite:///gec_mines.db")
    if database_url.startswith("postgresql://") or database_url.startswith("postgres://"):
        return "postgresql"
    else:
        return "sqlite"

def apply_database_specific_fixes(engine):
    """Applique des corrections sp√©cifiques au type de base de donn√©es"""
    db_type = get_database_type()
    
    if db_type == "sqlite":
        # Pour SQLite, s'assurer que les contraintes de cl√©s √©trang√®res sont activ√©es
        try:
            with engine.connect() as connection:
                connection.execute(text("PRAGMA foreign_keys = ON"))
            logging.debug("Contraintes de cl√©s √©trang√®res activ√©es pour SQLite")
        except Exception as e:
            logging.warning(f"Impossible d'activer les contraintes FK pour SQLite: {e}")
    
    elif db_type == "postgresql":
        # Pour PostgreSQL, des optimisations sp√©cifiques peuvent √™tre ajout√©es
        logging.debug("Base de donn√©es PostgreSQL d√©tect√©e")