import os
import uuid
import json
import logging
from datetime import datetime
from flask import request, session
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.pdfgen import canvas

# Import moved to function level to avoid circular import
# from models import LogActivite

ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'tiff', 'tif', 'svg'}

# Configuration des langues par d√©faut (peut √™tre √©tendue automatiquement)
DEFAULT_LANGUAGE_CONFIG = {
    'fr': {'name': 'Fran√ßais', 'flag': 'üá´üá∑', 'enabled': True},
    'en': {'name': 'English', 'flag': 'üá∫üá∏', 'enabled': True},
    'es': {'name': 'Espa√±ol', 'flag': 'üá™üá∏', 'enabled': True},
    'de': {'name': 'Deutsch', 'flag': 'üá©üá™', 'enabled': True},
    'it': {'name': 'Italiano', 'flag': 'üáÆüáπ', 'enabled': False},
    'pt': {'name': 'Portugu√™s', 'flag': 'üáµüáπ', 'enabled': False},
    'ar': {'name': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', 'flag': 'üá∏üá¶', 'enabled': False},
    'zh': {'name': '‰∏≠Êñá', 'flag': 'üá®üá≥', 'enabled': False},
    'ja': {'name': 'Êó•Êú¨Ë™û', 'flag': 'üáØüáµ', 'enabled': False},
    'ru': {'name': '–†—É—Å—Å–∫–∏–π', 'flag': 'üá∑üá∫', 'enabled': False}
}

def get_available_languages():
    """Retourne la liste des langues disponibles en d√©tectant automatiquement les fichiers JSON"""
    languages = {}
    lang_dir = os.path.join(os.path.dirname(__file__), 'lang')
    
    if os.path.exists(lang_dir):
        for filename in os.listdir(lang_dir):
            if filename.endswith('.json'):
                lang_code = filename[:-5]  # Remove .json
                
                # Utiliser la configuration par d√©faut si disponible, sinon g√©n√©rer automatiquement
                if lang_code in DEFAULT_LANGUAGE_CONFIG:
                    lang_config = DEFAULT_LANGUAGE_CONFIG[lang_code].copy()
                    # V√©rifier si la langue est activ√©e
                    if lang_config.get('enabled', True):
                        languages[lang_code] = lang_config
                else:
                    # G√©n√©ration automatique pour les nouvelles langues (activ√©es par d√©faut)
                    languages[lang_code] = {
                        'name': lang_code.upper(),  # Nom par d√©faut
                        'flag': 'üåê',  # Drapeau g√©n√©rique
                        'enabled': True
                    }
    
    return languages

def get_all_languages():
    """Retourne toutes les langues (activ√©es et d√©sactiv√©es)"""
    languages = {}
    lang_dir = os.path.join(os.path.dirname(__file__), 'lang')
    
    if os.path.exists(lang_dir):
        for filename in os.listdir(lang_dir):
            if filename.endswith('.json'):
                lang_code = filename[:-5]  # Remove .json
                
                # Utiliser la configuration par d√©faut si disponible, sinon g√©n√©rer automatiquement
                if lang_code in DEFAULT_LANGUAGE_CONFIG:
                    languages[lang_code] = DEFAULT_LANGUAGE_CONFIG[lang_code].copy()
                else:
                    # G√©n√©ration automatique pour les nouvelles langues
                    languages[lang_code] = {
                        'name': lang_code.upper(),  # Nom par d√©faut
                        'flag': 'üåê',  # Drapeau g√©n√©rique
                        'enabled': True
                    }
    
    return languages

def get_language_info(lang_code):
    """Obtient les informations d'une langue sp√©cifique"""
    available_languages = get_available_languages()
    return available_languages.get(lang_code, {'name': lang_code.upper(), 'flag': 'üåê'})

def toggle_language_status(lang_code, enabled):
    """Active ou d√©sactive une langue"""
    if lang_code in DEFAULT_LANGUAGE_CONFIG:
        DEFAULT_LANGUAGE_CONFIG[lang_code]['enabled'] = enabled
        return True
    return False

def download_language_file(lang_code):
    """T√©l√©charge le fichier de langue JSON"""
    lang_file = os.path.join(os.path.dirname(__file__), 'lang', f'{lang_code}.json')
    if os.path.exists(lang_file):
        return lang_file
    return None

def upload_language_file(lang_code, file_content):
    """Upload un nouveau fichier de langue JSON"""
    try:
        # V√©rifier que le contenu est du JSON valide
        json.loads(file_content)
        
        # Cr√©er le dossier lang s'il n'existe pas
        lang_dir = os.path.join(os.path.dirname(__file__), 'lang')
        os.makedirs(lang_dir, exist_ok=True)
        
        # Sauvegarder le fichier
        lang_file = os.path.join(lang_dir, f'{lang_code}.json')
        with open(lang_file, 'w', encoding='utf-8') as f:
            f.write(file_content)
        
        return True
    except (json.JSONDecodeError, Exception) as e:
        return False

def delete_language_file(lang_code):
    """Supprime un fichier de langue"""
    lang_file = os.path.join(os.path.dirname(__file__), 'lang', f'{lang_code}.json')
    if os.path.exists(lang_file) and lang_code != 'fr':  # Ne pas supprimer le fran√ßais
        try:
            os.remove(lang_file)
            return True
        except Exception:
            return False
    return False

def get_current_language():
    """Obtient la langue actuelle depuis la session, cookies ou les pr√©f√©rences utilisateur"""
    available_languages = get_available_languages()
    
    # 1. V√©rifier la session en premier
    if 'language' in session and session['language']:
        lang = session['language']
        if lang in available_languages:
            return lang
    
    # 2. V√©rifier les cookies pour la persistance
    try:
        if hasattr(request, 'cookies') and request.cookies:
            lang_cookie = request.cookies.get('language')
            if lang_cookie and lang_cookie in available_languages:
                session['language'] = lang_cookie
                return lang_cookie
    except Exception:
        pass
    
    # 3. Si utilisateur connect√©, v√©rifier ses pr√©f√©rences
    try:
        from flask_login import current_user
        if current_user.is_authenticated and hasattr(current_user, 'langue') and current_user.langue:
            if current_user.langue in available_languages:
                # Mettre √† jour la session pour la coh√©rence
                session['language'] = current_user.langue
                return current_user.langue
    except Exception:
        pass  # Ignorer les erreurs si current_user n'est pas disponible
    
    # 4. V√©rifier les pr√©f√©rences du navigateur
    try:
        if hasattr(request, 'accept_languages') and request.accept_languages:
            # Cr√©er une liste des codes de langue disponibles
            available_codes = list(available_languages.keys())
            best_match = request.accept_languages.best_match(available_codes)
            if best_match and best_match in available_languages:
                session['language'] = best_match
                return best_match
    except Exception:
        pass
    
    # 5. Langue par d√©faut (fran√ßais si disponible, sinon la premi√®re disponible)
    default_lang = 'fr' if 'fr' in available_languages else list(available_languages.keys())[0] if available_languages else 'fr'
    session['language'] = default_lang
    return default_lang

def format_date(date_obj, include_time=False):
    """Formate une date selon la langue courante"""
    if date_obj is None:
        return 'Non renseign√©e'
    
    lang = get_current_language()
    
    # Noms des jours en fran√ßais
    jours_fr = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']
    
    # Mois en fran√ßais
    mois_fr = ['janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin', 
               'juillet', 'ao√ªt', 'septembre', 'octobre', 'novembre', 'd√©cembre']
    
    # Noms des jours en anglais
    jours_en = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    
    # Mois en anglais
    mois_en = ['January', 'February', 'March', 'April', 'May', 'June', 
               'July', 'August', 'September', 'October', 'November', 'December']
    
    if lang == 'fr':
        # Format fran√ßais : Jour DD mois YYYY
        jour_idx = date_obj.weekday()  # 0 = Lundi, 6 = Dimanche
        mois_idx = date_obj.month - 1  # 0-11 pour l'index
        
        if include_time:
            return f"{jours_fr[jour_idx]} {date_obj.day} {mois_fr[mois_idx]} {date_obj.year} √† {date_obj.strftime('%H:%M')}"
        else:
            return f"{date_obj.day} {mois_fr[mois_idx]} {date_obj.year}"
    else:
        # Format anglais : Day, Month DD, YYYY
        jour_idx = date_obj.weekday()
        mois_idx = date_obj.month - 1
        
        if include_time:
            return f"{jours_en[jour_idx]}, {mois_en[mois_idx]} {date_obj.day}, {date_obj.year} at {date_obj.strftime('%I:%M %p')}"
        else:
            return f"{mois_en[mois_idx]} {date_obj.day}, {date_obj.year}"

def set_language(lang_code):
    """D√©finit la langue dans la session"""
    available_languages = get_available_languages()
    if lang_code in available_languages:
        session['language'] = lang_code
        return True
    return False

def load_translations(lang_code='fr'):
    """Charge les traductions pour une langue donn√©e"""
    lang_dir = os.path.join(os.path.dirname(__file__), 'lang')
    lang_file = os.path.join(lang_dir, f'{lang_code}.json')
    
    if not os.path.exists(lang_file):
        lang_file = os.path.join(lang_dir, 'fr.json')
    
    try:
        with open(lang_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def t(key, lang_code=None, **kwargs):
    """Fonction de traduction"""
    if lang_code is None:
        lang_code = get_current_language()
    
    translations = load_translations(lang_code)
    
    keys = key.split('.')
    value = translations
    
    for k in keys:
        if isinstance(value, dict) and k in value:
            value = value[k]
        else:
            return key
    
    if kwargs and isinstance(value, str):
        try:
            return value.format(**kwargs)
        except (KeyError, ValueError):
            return value
    
    return value

def allowed_file(filename):
    """V√©rifier si l'extension du fichier est autoris√©e"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_titre_responsable():
    """R√©cup√®re le titre du responsable de structure depuis les param√®tres syst√®me"""
    try:
        from models import ParametresSysteme
        parametres = ParametresSysteme.get_parametres()
        return parametres.titre_responsable_structure if parametres.titre_responsable_structure else "Secr√©taire G√©n√©ral"
    except:
        return "Secr√©taire G√©n√©ral"

def generate_accuse_reception():
    """G√©n√©rer un num√©ro d'accus√© de r√©ception unique selon le format configur√©"""
    import re
    
    # Import dynamique pour √©viter les d√©pendances circulaires
    from models import ParametresSysteme, Courrier
    
    # R√©cup√©rer le format configur√©
    try:
        parametres = ParametresSysteme.get_parametres()
        format_string = parametres.format_numero_accuse
    except:
        # Fallback si les param√®tres ne sont pas disponibles
        format_string = "GEC-{year}-{counter:05d}"
    
    now = datetime.now()
    
    # Remplacer les variables de base
    numero = format_string.replace('{year}', str(now.year))
    numero = numero.replace('{month}', f"{now.month:02d}")
    numero = numero.replace('{day}', f"{now.day:02d}")
    
    # Calculer le compteur pour l'ann√©e en cours
    try:
        count = Courrier.query.filter(
            Courrier.date_enregistrement >= datetime(now.year, 1, 1)
        ).count() + 1
    except:
        count = 1
    
    # Traiter les compteurs avec format
    counter_pattern = r'\{counter:(\d+)d\}'
    matches = re.findall(counter_pattern, numero)
    for match in matches:
        width = int(match)
        formatted_counter = f"{count:0{width}d}"
        numero = re.sub(r'\{counter:\d+d\}', formatted_counter, numero, count=1)
    
    # Compteur simple
    numero = numero.replace('{counter}', str(count))
    
    # Nombre al√©atoire
    import random
    random_pattern = r'\{random:(\d+)\}'
    matches = re.findall(random_pattern, numero)
    for match in matches:
        width = int(match)
        random_num = random.randint(10**(width-1), 10**width-1)
        numero = re.sub(r'\{random:\d+\}', str(random_num), numero, count=1)
    
    return numero

def generate_format_preview(format_string):
    """G√©n√©rer un aper√ßu du format de num√©ro d'accus√©"""
    import re
    from datetime import datetime
    
    if not format_string:
        format_string = "GEC-{year}-{counter:05d}"
    
    now = datetime.now()
    preview = format_string
    
    # Remplacer les variables de base
    preview = preview.replace('{year}', str(now.year))
    preview = preview.replace('{month}', f"{now.month:02d}")
    preview = preview.replace('{day}', f"{now.day:02d}")
    
    # Traiter les compteurs avec format
    counter_pattern = r'\{counter:(\d+)d\}'
    matches = re.findall(counter_pattern, preview)
    for match in matches:
        width = int(match)
        formatted_counter = f"{1:0{width}d}"  # Exemple avec 1
        preview = re.sub(r'\{counter:\d+d\}', formatted_counter, preview, count=1)
    
    # Compteur simple
    preview = preview.replace('{counter}', '1')
    
    # Nombre al√©atoire (exemple fixe pour la pr√©visualisation)
    random_pattern = r'\{random:(\d+)\}'
    matches = re.findall(random_pattern, preview)
    for match in matches:
        width = int(match)
        example_random = '1' * width  # Exemple avec des 1
        preview = re.sub(r'\{random:\d+\}', example_random, preview, count=1)
    
    return preview

def get_backup_files():
    """Obtenir la liste des fichiers de sauvegarde disponibles"""
    backup_dir = 'backups'
    if not os.path.exists(backup_dir):
        return []
    
    backup_files = []
    for filename in os.listdir(backup_dir):
        if filename.endswith('.zip'):
            file_path = os.path.join(backup_dir, filename)
            file_stat = os.stat(file_path)
            backup_files.append({
                'filename': filename,
                'size': file_stat.st_size,
                'date': datetime.fromtimestamp(file_stat.st_mtime)
            })
    
    # Trier par date d√©croissante
    backup_files.sort(key=lambda x: x['date'], reverse=True)
    return backup_files

def validate_backup_integrity(backup_filename):
    """Valider l'int√©grit√© d'une sauvegarde"""
    import zipfile
    import json as json_module
    
    backup_path = os.path.join('backups', backup_filename)
    if not os.path.exists(backup_path):
        return False, "Fichier de sauvegarde introuvable"
    
    try:
        with zipfile.ZipFile(backup_path, 'r') as zipf:
            # V√©rifier les fichiers essentiels
            required_files = ['backup_manifest.json']
            optional_files = ['database_backup.sql', 'database.db', 'environment_variables_documentation.json']
            
            file_list = zipf.namelist()
            
            # V√©rifier le manifeste
            if 'backup_manifest.json' not in file_list:
                return False, "Manifeste de sauvegarde manquant"
            
            # Lire le manifeste pour v√©rifier la version et les composants
            manifest_data = zipf.read('backup_manifest.json')
            manifest = json_module.loads(manifest_data.decode('utf-8'))
            
            # Validation des composants critiques
            issues = []
            
            # V√©rifier la base de donn√©es
            if 'database_backup.sql' not in file_list and 'database.db' not in file_list:
                issues.append("Aucune sauvegarde de base de donn√©es trouv√©e")
            
            # V√©rifier les dossiers importants
            important_folders = ['uploads/', 'forward_attachments/', 'lang/', 'templates/', 'static/']
            for folder in important_folders:
                folder_files = [f for f in file_list if f.startswith(folder)]
                if not folder_files and folder != 'forward_attachments/':  # forward_attachments peut √™tre vide
                    issues.append(f"Dossier {folder} vide ou manquant")
            
            if issues:
                return False, "Probl√®mes d√©tect√©s: " + "; ".join(issues)
            
            return True, f"Sauvegarde valide (version {manifest.get('version', 'inconnue')})"
            
    except Exception as e:
        return False, f"Erreur lors de la validation: {str(e)}"

def create_pre_update_backup():
    """Cr√©er une sauvegarde sp√©ciale avant mise √† jour avec protection des param√®tres"""
    import json as json_module
    import logging
    import zipfile
    import subprocess
    import tempfile
    from datetime import datetime
    
    # Cr√©er le dossier de sauvegarde s'il n'existe pas
    backup_dir = 'backups'
    os.makedirs(backup_dir, exist_ok=True)
    
    # Nom sp√©cial pour les sauvegardes de s√©curit√©
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_filename = f"backup_security_pre_update_{timestamp}.zip"
    backup_path = os.path.join(backup_dir, backup_filename)
    
    with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Sauvegarder la base de donn√©es PostgreSQL
        try:
            database_url = os.environ.get('DATABASE_URL')
            if database_url and 'postgresql' in database_url:
                # Extraire les param√®tres de connexion
                import urllib.parse
                parsed = urllib.parse.urlparse(database_url)
                
                # Cr√©er un dump PostgreSQL
                with tempfile.NamedTemporaryFile(suffix='.sql', delete=False) as temp_sql:
                    env = os.environ.copy()
                    env['PGPASSWORD'] = parsed.password
                    
                    cmd = [
                        'pg_dump',
                        '-h', parsed.hostname,
                        '-p', str(parsed.port or 5432),
                        '-U', parsed.username,
                        '-d', parsed.path[1:],  # Enlever le '/' initial
                        '--no-password',
                        '--clean',
                        '--if-exists'
                    ]
                    
                    with open(temp_sql.name, 'w') as f:
                        result = subprocess.run(cmd, stdout=f, stderr=subprocess.PIPE, env=env)
                        
                    if result.returncode == 0:
                        zipf.write(temp_sql.name, 'database_backup.sql')
                        logging.info("Sauvegarde PostgreSQL cr√©√©e avec succ√®s")
                    else:
                        logging.warning(f"Erreur pg_dump: {result.stderr.decode()}")
                    
                    os.unlink(temp_sql.name)
                    
        except Exception as e:
            logging.warning(f"Impossible de cr√©er la sauvegarde PostgreSQL: {e}")
        
        # Sauvegarder la base de donn√©es SQLite (si applicable)
        if os.path.exists('instance/database.db'):
            zipf.write('instance/database.db', 'database.db')
        
        # Sauvegarder les fichiers upload√©s
        if os.path.exists('uploads'):
            for root, dirs, files in os.walk('uploads'):
                for file in files:
                    file_path = os.path.join(root, file)
                    arc_path = os.path.relpath(file_path, '.')
                    zipf.write(file_path, arc_path)
        
        # Sauvegarder les pi√®ces jointes des transmissions
        if os.path.exists('forward_attachments'):
            for root, dirs, files in os.walk('forward_attachments'):
                for file in files:
                    file_path = os.path.join(root, file)
                    arc_path = os.path.relpath(file_path, '.')
                    zipf.write(file_path, arc_path)
        
        # Sauvegarder les fichiers de langues
        if os.path.exists('lang'):
            for root, dirs, files in os.walk('lang'):
                for file in files:
                    if file.endswith('.json'):
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, '.')
                        zipf.write(file_path, arc_path)
        
        # Cr√©er un fichier de documentation des variables d'environnement
        env_doc = {
            'DATABASE_URL': 'URL de connexion PostgreSQL (requise)',
            'SESSION_SECRET': 'Cl√© secr√®te pour les sessions Flask (requise)',
            'GEC_MASTER_KEY': 'Cl√© ma√Ætre pour le chiffrement (optionnelle)',
            'GEC_PASSWORD_SALT': 'Sel pour le hashage des mots de passe (optionnel)',
            'backup_created': datetime.now().isoformat(),
            'backup_type': 'pre_update_security'
        }
        
        # Ajouter la documentation d'environnement au zip
        env_doc_json = json_module.dumps(env_doc, indent=2, ensure_ascii=False)
        zipf.writestr('environment_variables_documentation.json', env_doc_json)
        
        # Sauvegarder les templates
        if os.path.exists('templates'):
            for root, dirs, files in os.walk('templates'):
                for file in files:
                    if file.endswith('.html'):
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, '.')
                        zipf.write(file_path, arc_path)
        
        # Sauvegarder les fichiers statiques importants
        if os.path.exists('static'):
            important_static = ['css', 'js', 'favicon.svg']
            for item in important_static:
                item_path = os.path.join('static', item)
                if os.path.exists(item_path):
                    if os.path.isfile(item_path):
                        zipf.write(item_path, os.path.relpath(item_path, '.'))
                    else:
                        for root, dirs, files in os.walk(item_path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                arc_path = os.path.relpath(file_path, '.')
                                zipf.write(file_path, arc_path)
        
        # Sauvegarder les exports
        if os.path.exists('exports'):
            for root, dirs, files in os.walk('exports'):
                for file in files:
                    file_path = os.path.join(root, file)
                    arc_path = os.path.relpath(file_path, '.')
                    zipf.write(file_path, arc_path)
        
        # SECURITY FIX: Inclure les param√®tres critiques DANS l'archive zip
        try:
            from models import ParametresSysteme
            
            # R√©cup√©rer tous les param√®tres syst√®me critiques
            critical_params = [
                'nom_logiciel', 'nom_organisation', 'adresse_organisation', 
                'telephone_organisation', 'email_organisation', 'logo_organisation',
                'fuseau_horaire', 'format_date', 'langue_defaut', 
                'sendgrid_api_key', 'email_provider', 'smtp_server', 'smtp_port',
                'smtp_username', 'smtp_password', 'smtp_use_tls',
                'notify_superadmin_new_mail', 'titre_responsable_structure'
            ]
            
            protected_settings = {
                'backup_info': {
                    'created': datetime.now().isoformat(),
                    'type': 'pre_update_security',
                    'version': '2.0'
                },
                'critical_settings': {}
            }
            
            for param in critical_params:
                value = ParametresSysteme.get_valeur(param)
                if value:
                    protected_settings['critical_settings'][param] = value
            
            # Sauvegarder les param√®tres critiques DANS l'archive zip (S√âCURIS√â)
            protected_json = json_module.dumps(protected_settings, indent=2, ensure_ascii=False)
            zipf.writestr('protected_settings.json', protected_json)
            
            logging.info(f"Param√®tres critiques sauvegard√©s de mani√®re s√©curis√©e dans l'archive")
            
        except Exception as e:
            logging.warning(f"Impossible de sauvegarder les param√®tres critiques: {e}")
        
        # Cr√©er le manifeste de sauvegarde
        manifest = {
            'version': '2.0',
            'created': datetime.now().isoformat(),
            'type': 'pre_update_security',
            'components': {
                'database': True,
                'uploads': os.path.exists('uploads'),
                'forward_attachments': os.path.exists('forward_attachments'),
                'languages': os.path.exists('lang'),
                'templates': os.path.exists('templates'),
                'static_files': os.path.exists('static'),
                'exports': os.path.exists('exports'),
                'protected_settings': True
            }
        }
        
        manifest_json = json_module.dumps(manifest, indent=2, ensure_ascii=False)
        zipf.writestr('backup_manifest.json', manifest_json)
    
    logging.info(f"Sauvegarde de s√©curit√© pr√©-mise √† jour cr√©√©e: {backup_filename}")
    return backup_filename

def create_system_backup():
    """Cr√©er une sauvegarde compl√®te du syst√®me avec support PostgreSQL"""
    import zipfile
    import subprocess
    import tempfile
    from datetime import datetime
    
    # Cr√©er le dossier de sauvegarde s'il n'existe pas
    backup_dir = 'backups'
    os.makedirs(backup_dir, exist_ok=True)
    
    # Nom du fichier de sauvegarde avec timestamp
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_filename = f"backup_gec_{timestamp}.zip"
    backup_path = os.path.join(backup_dir, backup_filename)
    
    with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Sauvegarder la base de donn√©es PostgreSQL
        try:
            database_url = os.environ.get('DATABASE_URL')
            if database_url and 'postgresql' in database_url:
                # Extraire les param√®tres de connexion
                import urllib.parse
                parsed = urllib.parse.urlparse(database_url)
                
                # Cr√©er un dump PostgreSQL
                with tempfile.NamedTemporaryFile(suffix='.sql', delete=False) as temp_sql:
                    env = os.environ.copy()
                    env['PGPASSWORD'] = parsed.password
                    
                    cmd = [
                        'pg_dump',
                        '-h', parsed.hostname,
                        '-p', str(parsed.port or 5432),
                        '-U', parsed.username,
                        '-d', parsed.path[1:],  # Enlever le '/' initial
                        '--no-password',
                        '--clean',
                        '--if-exists'
                    ]
                    
                    with open(temp_sql.name, 'w') as f:
                        result = subprocess.run(cmd, stdout=f, stderr=subprocess.PIPE, env=env)
                        
                    if result.returncode == 0:
                        zipf.write(temp_sql.name, 'database_backup.sql')
                        logging.info("Sauvegarde PostgreSQL cr√©√©e avec succ√®s")
                    else:
                        logging.warning(f"Erreur pg_dump: {result.stderr.decode()}")
                    
                    os.unlink(temp_sql.name)
                    
        except Exception as e:
            logging.warning(f"Impossible de cr√©er la sauvegarde PostgreSQL: {e}")
        
        # Sauvegarder la base de donn√©es SQLite (si applicable)
        if os.path.exists('instance/database.db'):
            zipf.write('instance/database.db', 'database.db')
        
        # Sauvegarder les fichiers upload√©s
        if os.path.exists('uploads'):
            for root, dirs, files in os.walk('uploads'):
                for file in files:
                    file_path = os.path.join(root, file)
                    arc_path = os.path.relpath(file_path, '.')
                    zipf.write(file_path, arc_path)
        
        # Sauvegarder les pi√®ces jointes des transmissions
        if os.path.exists('forward_attachments'):
            for root, dirs, files in os.walk('forward_attachments'):
                for file in files:
                    file_path = os.path.join(root, file)
                    arc_path = os.path.relpath(file_path, '.')
                    zipf.write(file_path, arc_path)
        
        # Sauvegarder les fichiers de langues
        if os.path.exists('lang'):
            for root, dirs, files in os.walk('lang'):
                for file in files:
                    if file.endswith('.json'):
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, '.')
                        zipf.write(file_path, arc_path)
        
        # Cr√©er un fichier de documentation des variables d'environnement
        env_doc = {
            'DATABASE_URL': 'URL de connexion PostgreSQL (requise)',
            'GEC_MASTER_KEY': 'Cl√© ma√Ætre pour le chiffrement (64 caract√®res hex)',
            'GEC_PASSWORD_SALT': 'Sel pour les mots de passe (64 caract√®res hex)',
            'SENDGRID_API_KEY': 'Cl√© API SendGrid pour les emails',
            'SMTP_SERVER': 'Serveur SMTP pour les emails',
            'SMTP_PORT': 'Port SMTP',
            'SMTP_EMAIL': 'Adresse email SMTP',
            'SMTP_PASSWORD': 'Mot de passe SMTP',
            'SMTP_USE_TLS': 'Utiliser TLS pour SMTP (true/false)',
            'SESSION_SECRET': 'Cl√© secr√®te pour les sessions Flask'
        }
        
        import json as json_module
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as env_file:
            json_module.dump(env_doc, env_file, indent=2, ensure_ascii=False)
            zipf.write(env_file.name, 'environment_variables_documentation.json')
            os.unlink(env_file.name)
        
        # Ajouter un manifeste de sauvegarde complet
        import json as json_module
        import tempfile
        manifest = {
            'timestamp': timestamp,
            'version': '1.2.0',
            'database_type': 'postgresql' if 'postgresql' in os.environ.get('DATABASE_URL', '') else 'sqlite',
            'backup_type': 'full_system_complete',
            'files_included': [
                'database', 'uploads', 'forward_attachments', 'lang', 'config', 
                'templates', 'static', 'exports', 'environment_doc'
            ],
            'description': 'Sauvegarde compl√®te du syst√®me GEC incluant toutes les donn√©es, fichiers et configurations',
            'restore_instructions': {
                'database': 'Restaurer avec psql sur PostgreSQL ou copier pour SQLite',
                'files': 'Extraire tous les dossiers √† la racine du nouveau syst√®me',
                'environment': 'Configurer les variables d\'environnement selon environment_variables_documentation.json',
                'post_restore': 'Red√©marrer l\'application apr√®s restauration'
            }
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as manifest_file:
            json_module.dump(manifest, manifest_file, indent=2)
            zipf.write(manifest_file.name, 'backup_manifest.json')
            os.unlink(manifest_file.name)
        
        # Sauvegarder les fichiers de configuration et migration
        config_files = [
            'app.py', 'models.py', 'utils.py', 'views.py', 
            'migration_utils.py', 'email_utils.py', 'security_utils.py',
            'project-dependencies.txt', 'replit.md'
        ]
        for config_file in config_files:
            if os.path.exists(config_file):
                zipf.write(config_file)
        
        # Sauvegarder TOUS les templates 
        if os.path.exists('templates'):
            for root, dirs, files in os.walk('templates'):
                for file in files:
                    if file.endswith(('.html', '.htm', '.jinja2')):
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, '.')
                        zipf.write(file_path, arc_path)
        
        # Sauvegarder les fichiers statiques critiques (CSS, JS, images)
        static_folders = ['static/css', 'static/js', 'static/images', 'static/vendor']
        for folder in static_folders:
            if os.path.exists(folder):
                for root, dirs, files in os.walk(folder):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, '.')
                        zipf.write(file_path, arc_path)
        
        # Sauvegarder les exports et backups existants comme r√©f√©rence
        if os.path.exists('exports'):
            for file in os.listdir('exports'):
                if file.endswith('.pdf') or file.endswith('.xlsx'):
                    file_path = os.path.join('exports', file)
                    arc_path = os.path.relpath(file_path, '.')
                    zipf.write(file_path, arc_path)
    
    return backup_filename

def restore_system_from_backup(backup_file):
    """Restaurer le syst√®me depuis un fichier de sauvegarde avec support PostgreSQL"""
    import zipfile
    import tempfile
    import subprocess
    import shutil
    
    # Cr√©er un dossier temporaire pour extraire la sauvegarde
    with tempfile.TemporaryDirectory() as temp_dir:
        # Sauvegarder le fichier upload√©
        backup_path = os.path.join(temp_dir, 'backup.zip')
        backup_file.save(backup_path)
        
        # Extraire la sauvegarde
        with zipfile.ZipFile(backup_path, 'r') as zipf:
            zipf.extractall(temp_dir)
        
        # Restaurer la base de donn√©es PostgreSQL
        db_sql_backup = os.path.join(temp_dir, 'database_backup.sql')
        if os.path.exists(db_sql_backup):
            try:
                database_url = os.environ.get('DATABASE_URL')
                if database_url and 'postgresql' in database_url:
                    import urllib.parse
                    parsed = urllib.parse.urlparse(database_url)
                    
                    env = os.environ.copy()
                    env['PGPASSWORD'] = parsed.password
                    
                    # Restaurer la base de donn√©es PostgreSQL
                    cmd = [
                        'psql',
                        '-h', parsed.hostname,
                        '-p', str(parsed.port or 5432),
                        '-U', parsed.username,
                        '-d', parsed.path[1:],
                        '-f', db_sql_backup,
                        '--no-password'
                    ]
                    
                    result = subprocess.run(cmd, capture_output=True, text=True, env=env)
                    if result.returncode == 0:
                        logging.info("Base de donn√©es PostgreSQL restaur√©e avec succ√®s")
                    else:
                        logging.error(f"Erreur lors de la restauration PostgreSQL: {result.stderr}")
                        
            except Exception as e:
                logging.error(f"Erreur lors de la restauration PostgreSQL: {e}")
        
        # Restaurer la base de donn√©es SQLite (si applicable)
        db_backup_path = os.path.join(temp_dir, 'database.db')
        if os.path.exists(db_backup_path):
            os.makedirs('instance', exist_ok=True)
            shutil.copy2(db_backup_path, 'instance/database.db')
        
        # Restaurer les fichiers upload√©s
        uploads_backup_path = os.path.join(temp_dir, 'uploads')
        if os.path.exists(uploads_backup_path):
            # Cr√©er une sauvegarde des uploads existants
            if os.path.exists('uploads'):
                upload_backup_name = f"uploads_backup_{int(time.time())}"
                shutil.move('uploads', upload_backup_name)
            # Restaurer les nouveaux uploads
            shutil.copytree(uploads_backup_path, 'uploads')
        
        # Restaurer les pi√®ces jointes des transmissions
        forward_attachments_backup_path = os.path.join(temp_dir, 'forward_attachments')
        if os.path.exists(forward_attachments_backup_path):
            # Cr√©er une sauvegarde des pi√®ces jointes existantes
            if os.path.exists('forward_attachments'):
                forward_backup_name = f"forward_attachments_backup_{int(time.time())}"
                shutil.move('forward_attachments', forward_backup_name)
            # Restaurer les nouvelles pi√®ces jointes
            shutil.copytree(forward_attachments_backup_path, 'forward_attachments')
        
        # Restaurer tous les templates
        templates_backup_path = os.path.join(temp_dir, 'templates')
        if os.path.exists(templates_backup_path):
            # Cr√©er une sauvegarde des templates existants
            if os.path.exists('templates'):
                templates_backup_name = f"templates_backup_{int(time.time())}"
                shutil.move('templates', templates_backup_name)
            # Restaurer les nouveaux templates
            shutil.copytree(templates_backup_path, 'templates')
        
        # Restaurer les fichiers statiques
        static_backup_path = os.path.join(temp_dir, 'static')
        if os.path.exists(static_backup_path):
            # Cr√©er une sauvegarde des fichiers statiques existants
            if os.path.exists('static'):
                static_backup_name = f"static_backup_{int(time.time())}"
                shutil.move('static', static_backup_name)
            # Restaurer les nouveaux fichiers statiques
            shutil.copytree(static_backup_path, 'static')
        
        # Restaurer les exports
        exports_backup_path = os.path.join(temp_dir, 'exports')
        if os.path.exists(exports_backup_path):
            # Cr√©er le dossier exports s'il n'existe pas
            os.makedirs('exports', exist_ok=True)
            # Copier les fichiers d'export
            for file in os.listdir(exports_backup_path):
                src_file = os.path.join(exports_backup_path, file)
                dst_file = os.path.join('exports', file)
                if os.path.isfile(src_file):
                    # Cr√©er une sauvegarde si le fichier existe d√©j√†
                    if os.path.exists(dst_file):
                        backup_name = f"{dst_file}.backup_{int(time.time())}"
                        shutil.copy2(dst_file, backup_name)
                    shutil.copy2(src_file, dst_file)
        
        # Restaurer les fichiers de langues
        lang_backup_path = os.path.join(temp_dir, 'lang')
        if os.path.exists(lang_backup_path):
            if os.path.exists('lang'):
                # Sauvegarder les langues existantes avant remplacement
                backup_existing_lang = f'lang_backup_{int(time.time())}'
                shutil.move('lang', backup_existing_lang)
            shutil.copytree(lang_backup_path, 'lang')
        
        # Restaurer les fichiers de configuration critiques (optionnel et s√©curis√©)
        config_files_to_restore = [
            'project-dependencies.txt', 'replit.md'
        ]
        for config_file in config_files_to_restore:
            backup_config_path = os.path.join(temp_dir, config_file)
            if os.path.exists(backup_config_path):
                # Cr√©er une sauvegarde de l'existant
                if os.path.exists(config_file):
                    backup_name = f"{config_file}.backup_{int(time.time())}"
                    shutil.copy2(config_file, backup_name)
                # Restaurer le fichier
                shutil.copy2(backup_config_path, config_file)
        
        # Afficher un message informatif pour l'administrateur sur les variables d'environnement
        env_doc_path = os.path.join(temp_dir, 'environment_variables_documentation.json')
        if os.path.exists(env_doc_path):
            logging.info("Documentation des variables d'environnement disponible dans environment_variables_documentation.json")
            logging.info("V√©rifiez que toutes les variables requises sont configur√©es avant de red√©marrer l'application")
        
        # V√©rifier le manifeste de sauvegarde pour compatibilit√©
        manifest_path = os.path.join(temp_dir, 'backup_manifest.json')
        if os.path.exists(manifest_path):
            try:
                import json as json_module
                with open(manifest_path, 'r') as f:
                    manifest = json_module.load(f)
                logging.info(f"Restauration depuis sauvegarde version {manifest.get('version', 'inconnue')}")
                logging.info(f"Type de base de donn√©es: {manifest.get('database_type', 'inconnue')}")
                logging.info(f"√âl√©ments restaur√©s: {', '.join(manifest.get('files_included', []))}")
            except Exception as e:
                logging.warning(f"Impossible de lire le manifeste de sauvegarde: {e}")
    
    return True

def recover_files_from_old_backup(backup_filename, file_patterns):
    """R√©cup√©rer des fichiers sp√©cifiques d'une ancienne sauvegarde"""
    import zipfile
    import tempfile
    import fnmatch
    import time
    
    backup_path = os.path.join('backups', backup_filename)
    if not os.path.exists(backup_path):
        return False, f"Fichier de sauvegarde {backup_filename} non trouv√©"
    
    recovered_files = []
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # Extraire la sauvegarde
            with zipfile.ZipFile(backup_path, 'r') as zipf:
                all_files = zipf.namelist()
                
                # Trouver les fichiers correspondant aux patterns
                files_to_extract = []
                for pattern in file_patterns:
                    files_to_extract.extend(fnmatch.filter(all_files, pattern))
                
                # Extraire uniquement les fichiers demand√©s
                for file_path in files_to_extract:
                    zipf.extract(file_path, temp_dir)
                    
                    # Cr√©er le r√©pertoire de destination si n√©cessaire
                    dest_path = file_path
                    dest_dir = os.path.dirname(dest_path)
                    if dest_dir:
                        os.makedirs(dest_dir, exist_ok=True)
                    
                    # Copier le fichier r√©cup√©r√©
                    src_path = os.path.join(temp_dir, file_path)
                    if os.path.exists(src_path):
                        # Cr√©er une sauvegarde du fichier existant
                        if os.path.exists(dest_path):
                            backup_name = f"{dest_path}.backup_{int(time.time())}"
                            import shutil
                            shutil.copy2(dest_path, backup_name)
                        
                        # Copier le fichier r√©cup√©r√©
                        import shutil
                        shutil.copy2(src_path, dest_path)
                        recovered_files.append(dest_path)
        
        return True, f"Fichiers r√©cup√©r√©s avec succ√®s: {', '.join(recovered_files)}"
        
    except Exception as e:
        return False, f"Erreur lors de la r√©cup√©ration: {str(e)}"

def create_automatic_backup_before_migration():
    """Cr√©er une sauvegarde automatique avant migration"""
    import logging
    try:
        backup_filename = create_system_backup()
        logging.info(f"Sauvegarde pr√©-migration cr√©√©e: {backup_filename}")
        return backup_filename
    except Exception as e:
        logging.error(f"Impossible de cr√©er la sauvegarde pr√©-migration: {e}")
        return None

def verify_backup_integrity(backup_filename):
    """V√©rifier l'int√©grit√© d'un fichier de sauvegarde"""
    import zipfile
    
    backup_path = os.path.join('backups', backup_filename)
    if not os.path.exists(backup_path):
        return False, "Fichier de sauvegarde non trouv√©"
    
    try:
        with zipfile.ZipFile(backup_path, 'r') as zipf:
            # Tester l'int√©grit√© du ZIP
            bad_files = zipf.testzip()
            if bad_files:
                return False, f"Fichiers corrompus d√©tect√©s: {bad_files}"
            
            # V√©rifier la pr√©sence des fichiers critiques
            files_in_zip = zipf.namelist()
            critical_files = ['database_backup.sql', 'database.db', 'uploads/', 'lang/']
            found_critical = any(any(f.startswith(critical) for f in files_in_zip) for critical in critical_files)
            
            if not found_critical:
                return False, "Aucun fichier critique trouv√© dans la sauvegarde"
            
            return True, "Sauvegarde int√®gre"
            
    except Exception as e:
        return False, f"Erreur lors de la v√©rification: {str(e)}"

def log_activity(user_id, action, description, courrier_id=None):
    """Enregistrer une activit√© dans les logs"""
    try:
        from flask import request
        ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR'))
        
        from models import LogActivite
        from app import db  # Import locally to avoid circular import
        log = LogActivite(
            utilisateur_id=user_id,
            action=action,
            description=description,
            courrier_id=courrier_id,
            ip_address=ip_address
        )
        
        db.session.add(log)
        db.session.commit()
    except Exception as e:
        from app import db  # Import locally to avoid circular import
        db.session.rollback()
        print(f"Erreur lors de l'enregistrement du log: {e}")

def log_courrier_modification(courrier_id, user_id, champ_modifie, ancienne_valeur, nouvelle_valeur):
    """Enregistrer une modification de courrier"""
    try:
        from flask import request
        from models import CourrierModification
        from app import db  # Import locally to avoid circular import
        
        ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR'))
        
        modification = CourrierModification(
            courrier_id=courrier_id,
            utilisateur_id=user_id,
            champ_modifie=champ_modifie,
            ancienne_valeur=str(ancienne_valeur) if ancienne_valeur is not None else None,
            nouvelle_valeur=str(nouvelle_valeur) if nouvelle_valeur is not None else None,
            ip_address=ip_address
        )
        
        db.session.add(modification)
        db.session.commit()
        
    except Exception as e:
        print(f"Erreur lors de l'enregistrement de la modification: {e}")
        from app import db  # Import locally to avoid circular import
        db.session.rollback()

def get_all_senders():
    """R√©cup√©rer la liste de tous les exp√©diteurs/destinataires uniques"""
    try:
        from models import Courrier
        from app import db  # Import locally to avoid circular import
        from sqlalchemy import or_, func
        
        # R√©cup√©rer tous les exp√©diteurs et destinataires non vides
        senders_query = db.session.query(
            Courrier.expediteur.label('contact'),
            func.count(Courrier.id).label('count_courriers'),
            func.max(Courrier.date_enregistrement).label('derniere_date')
        ).filter(
            Courrier.expediteur.isnot(None),
            Courrier.expediteur != ''
        ).group_by(Courrier.expediteur)
        
        destinataires_query = db.session.query(
            Courrier.destinataire.label('contact'),
            func.count(Courrier.id).label('count_courriers'),
            func.max(Courrier.date_enregistrement).label('derniere_date')
        ).filter(
            Courrier.destinataire.isnot(None),
            Courrier.destinataire != ''
        ).group_by(Courrier.destinataire)
        
        # Combiner les r√©sultats
        all_contacts = []
        
        # Ajouter les exp√©diteurs
        for sender in senders_query.all():
            all_contacts.append({
                'nom': sender.contact,
                'type': 'Exp√©diteur',
                'nombre_courriers': sender.count_courriers,
                'derniere_date': sender.derniere_date
            })
        
        # Ajouter les destinataires
        for dest in destinataires_query.all():
            # V√©rifier s'il n'existe pas d√©j√† comme exp√©diteur
            existing = next((c for c in all_contacts if c['nom'] == dest.contact), None)
            if existing:
                existing['type'] = 'Exp√©diteur/Destinataire'
                existing['nombre_courriers'] += dest.count_courriers
                if dest.derniere_date > existing['derniere_date']:
                    existing['derniere_date'] = dest.derniere_date
            else:
                all_contacts.append({
                    'nom': dest.contact,
                    'type': 'Destinataire',
                    'nombre_courriers': dest.count_courriers,
                    'derniere_date': dest.derniere_date
                })
        
        # Trier par nombre de courriers d√©croissant
        all_contacts.sort(key=lambda x: x['nombre_courriers'], reverse=True)
        
        return all_contacts
        
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des contacts: {e}")
        return []

def export_courrier_pdf(courrier):
    """Exporter un courrier en PDF avec ses m√©tadonn√©es"""
    # Cr√©er le dossier exports s'il n'existe pas
    exports_dir = 'exports'
    os.makedirs(exports_dir, exist_ok=True)
    
    # Nom du fichier PDF
    filename = f"courrier_{courrier.numero_accuse_reception}.pdf"
    pdf_path = os.path.join(exports_dir, filename)
    
    # Classe personnalis√©e pour les num√©ros de page
    class NumberedCanvas(canvas.Canvas):
        def __init__(self, *args, **kwargs):
            canvas.Canvas.__init__(self, *args, **kwargs)
            self._saved_page_states = []
            
        def showPage(self):
            self._saved_page_states.append(dict(self.__dict__))
            self._startPage()
            
        def save(self):
            """Add page info to each page (page x of y)"""
            num_pages = len(self._saved_page_states)
            for (page_num, page_state) in enumerate(self._saved_page_states):
                self.__dict__.update(page_state)
                self.draw_page_number(page_num + 1, num_pages)
                canvas.Canvas.showPage(self)
            canvas.Canvas.save(self)
            
        def draw_page_number(self, page_num, total_pages):
            """Draw the footer with copyright and page number at the bottom on two lines"""
            from models import ParametresSysteme
            from flask_login import current_user
            parametres = ParametresSysteme.get_parametres()
            
            # Premi√®re ligne : Syst√®me et Copyright
            line1_parts = []
            if parametres.texte_footer:
                line1_parts.append(parametres.texte_footer)
            
            copyright = parametres.copyright_text or parametres.get_copyright_decrypte()
            line1_parts.append(copyright)
            
            line1_text = " | ".join(line1_parts)
            
            # Deuxi√®me ligne : Date, utilisateur et pagination
            line2_parts = []
            
            # Date de g√©n√©ration
            now = datetime.now()
            date_str = now.strftime('%A %d %B %Y √† %H:%M')
            # Traduire en fran√ßais
            mois_fr = {
                'January': 'janvier', 'February': 'f√©vrier', 'March': 'mars', 'April': 'avril',
                'May': 'mai', 'June': 'juin', 'July': 'juillet', 'August': 'ao√ªt',
                'September': 'septembre', 'October': 'octobre', 'November': 'novembre', 'December': 'd√©cembre'
            }
            jours_fr = {
                'Monday': 'Lundi', 'Tuesday': 'Mardi', 'Wednesday': 'Mercredi', 'Thursday': 'Jeudi',
                'Friday': 'Vendredi', 'Saturday': 'Samedi', 'Sunday': 'Dimanche'
            }
            for en, fr in mois_fr.items():
                date_str = date_str.replace(en, fr)
            for en, fr in jours_fr.items():
                date_str = date_str.replace(en, fr)
            
            # Essayer d'obtenir l'utilisateur actuel
            try:
                if current_user and current_user.is_authenticated:
                    user_info = f"par {current_user.nom_complet}"
                else:
                    user_info = "par le syst√®me GEC"
            except:
                user_info = "par le syst√®me GEC"
            
            line2_parts.append(f"Document g√©n√©r√© le {date_str} {user_info}")
            line2_parts.append(f"Page {page_num} sur {total_pages}")
            
            line2_text = " | ".join(line2_parts)
            
            # Configuration du texte
            self.setFont("Helvetica", 8)
            page_width = A4[0]
            left_margin = 0.75*inch
            right_margin = 0.75*inch
            text_width = page_width - left_margin - right_margin
            
            # Dessiner la premi√®re ligne
            line1_width = self.stringWidth(line1_text, "Helvetica", 8)
            if line1_width <= text_width:
                x_position1 = (page_width - line1_width) / 2
            else:
                x_position1 = left_margin
            self.drawString(x_position1, 0.6*inch, line1_text)
            
            # Dessiner la deuxi√®me ligne
            line2_width = self.stringWidth(line2_text, "Helvetica", 8)
            if line2_width <= text_width:
                x_position2 = (page_width - line2_width) / 2
            else:
                x_position2 = left_margin
            self.drawString(x_position2, 0.4*inch, line2_text)
    
    # Cr√©er le document PDF avec la classe personnalis√©e
    doc = SimpleDocTemplate(pdf_path, pagesize=A4, topMargin=1*inch, bottomMargin=1.2*inch, 
                          leftMargin=0.75*inch, rightMargin=0.75*inch)
    styles = getSampleStyleSheet()
    story = []
    
    # Style personnalis√© pour le titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=1,  # Centr√©
        textColor=colors.darkblue
    )
    
    # Style pour le texte avec wrap automatique
    text_style = ParagraphStyle(
        'CustomText',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=12,
        wordWrap='CJK',  # Permettre le wrap sur les mots longs
        splitLongWords=True,
        allowWidows=1,
        allowOrphans=1
    )
    
    # Style pour les labels
    label_style = ParagraphStyle(
        'LabelStyle',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=6,
        textColor=colors.darkblue,
        fontName='Helvetica-Bold'
    )
    
    # R√©cup√©rer les param√®tres syst√®me pour le PDF
    from models import ParametresSysteme
    parametres = ParametresSysteme.get_parametres()
    
    # Ajouter le logo s'il existe
    logo_path = None
    if parametres.logo_pdf:
        # Convertir l'URL relative en chemin de fichier absolu
        if parametres.logo_pdf.startswith('/uploads/'):
            logo_file_path = parametres.logo_pdf[9:]  # Enlever '/uploads/'
            logo_abs_path = os.path.join('uploads', logo_file_path)
            if os.path.exists(logo_abs_path):
                logo_path = logo_abs_path
    elif parametres.logo_url:
        # Convertir l'URL relative en chemin de fichier absolu
        if parametres.logo_url.startswith('/uploads/'):
            logo_file_path = parametres.logo_url[9:]  # Enlever '/uploads/'
            logo_abs_path = os.path.join('uploads', logo_file_path)
            if os.path.exists(logo_abs_path):
                logo_path = logo_abs_path
    
    if logo_path:
        try:
            # Charger l'image pour obtenir ses dimensions originales
            from PIL import Image as PILImage
            pil_img = PILImage.open(logo_path)
            original_width, original_height = pil_img.size
            
            # Calculer les dimensions en pr√©servant le ratio
            max_width = 1.5*inch
            max_height = 1*inch
            
            # Calculer le ratio de redimensionnement
            width_ratio = max_width / original_width
            height_ratio = max_height / original_height
            ratio = min(width_ratio, height_ratio)
            
            # Nouvelles dimensions pr√©servant le ratio
            new_width = original_width * ratio
            new_height = original_height * ratio
            
            logo = Image(logo_path, width=new_width, height=new_height)
            logo.hAlign = 'CENTER'
            story.append(logo)
            story.append(Spacer(1, 10))
        except Exception as e:
            print(f"Erreur chargement logo: {e}")  # Pour debug
    
    # Titre configur√© du document
    titre_pdf = parametres.titre_pdf or "Minist√®re des Mines"
    sous_titre_pdf = parametres.sous_titre_pdf or "Secr√©tariat G√©n√©ral"
    
    # En-t√™te pays - PREMIER √âL√âMENT
    pays_style = ParagraphStyle(
        'PaysStyle',
        parent=styles['Normal'],
        fontSize=16,
        fontName='Helvetica-Bold',
        alignment=1,  # Center
        spaceAfter=10,
        textColor=colors.darkblue
    )
    pays_text = parametres.pays_pdf or "R√©publique D√©mocratique du Congo"
    story.append(Paragraph(pays_text, pays_style))
    
    title = Paragraph(f"{titre_pdf}<br/>{sous_titre_pdf}", title_style)
    story.append(title)
    story.append(Spacer(1, 20))
    
    # Sous-titre selon le type
    type_display = "COURRIER ENTRANT" if courrier.type_courrier == 'ENTRANT' else "COURRIER SORTANT"
    subtitle = Paragraph(f"ACCUS√â DE R√âCEPTION - {type_display}", styles['Heading2'])
    story.append(subtitle)
    story.append(Spacer(1, 20))
    
    # Tableau des m√©tadonn√©es avec text wrapping pour les champs longs
    data = [
        [Paragraph('N¬∞ d\'Accus√© de R√©ception:', label_style), Paragraph(courrier.numero_accuse_reception, text_style)],
        [Paragraph('Type de Courrier:', label_style), Paragraph(courrier.type_courrier, text_style)],
        [Paragraph('N¬∞ de R√©f√©rence:', label_style), Paragraph(courrier.numero_reference if courrier.numero_reference else 'Non r√©f√©renc√©', text_style)],
        [Paragraph(courrier.get_label_contact() + ':', label_style), Paragraph(courrier.get_contact_principal() if courrier.get_contact_principal() else 'Non sp√©cifi√©', text_style)],
    ]
    
    # Ajouter le champ SG en copie seulement pour les courriers entrants
    if courrier.type_courrier == 'ENTRANT' and hasattr(courrier, 'secretaire_general_copie'):
        sg_copie_text = 'Oui' if courrier.secretaire_general_copie else 'Non'
        if courrier.secretaire_general_copie is None:
            sg_copie_text = 'Non renseign√©'
        data.append([Paragraph('En copie:', label_style), Paragraph(sg_copie_text, text_style)])
    
    # Utiliser le bon label selon le type de courrier
    date_label = "Date d'√âmission:" if courrier.type_courrier == 'SORTANT' else "Date de R√©daction:"
    
    data.extend([
        [Paragraph('Objet:', label_style), Paragraph(courrier.objet, text_style)],
        [Paragraph(date_label, label_style), Paragraph(format_date(courrier.date_redaction), text_style)],
        [Paragraph('Date d\'Enregistrement:', label_style), Paragraph(format_date(courrier.date_enregistrement, include_time=True), text_style)],
        [Paragraph('Enregistr√© par:', label_style), Paragraph(courrier.utilisateur_enregistrement.nom_complet, text_style)],
        [Paragraph('Statut:', label_style), Paragraph(courrier.statut, text_style)],
        [Paragraph('Fichier Joint:', label_style), Paragraph(courrier.fichier_nom if courrier.fichier_nom else 'Aucun', text_style)],
    ])
    
    table = Table(data, colWidths=[2.5*inch, 4*inch], repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Alignement vertical en haut
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('LEFTPADDING', (0, 0), (-1, -1), 6),
        ('RIGHTPADDING', (0, 0), (-1, -1), 6),
        ('BACKGROUND', (1, 0), (1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('WORDWRAP', (1, 0), (1, -1), 'CJK')  # Permettre le wrap des mots dans la colonne de droite
    ]))
    
    story.append(table)
    story.append(Spacer(1, 30))
    
    # Ajouter une note qui indique que les commentaires et transmissions sont en page 2
    from models import CourrierComment, CourrierForward
    comments = CourrierComment.query.filter_by(courrier_id=courrier.id, actif=True)\
                                   .order_by(CourrierComment.date_creation.desc()).all()
    forwards = CourrierForward.query.filter_by(courrier_id=courrier.id)\
                                   .order_by(CourrierForward.date_transmission.desc()).all()
    
    # Note d'information si il y a des commentaires ou transmissions
    if comments or forwards:
        info_note_style = ParagraphStyle(
            'InfoNote',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=12,
            textColor=colors.darkblue,
            fontName='Helvetica-Oblique',
            alignment=1  # Centr√©
        )
        
        elements_page2 = []
        if comments:
            elements_page2.append("commentaires")
        if forwards:
            elements_page2.append("historique des transmissions")
        
        note_text = f"Voir page suivante pour : {' et '.join(elements_page2)}"
        info_note = Paragraph(note_text, info_note_style)
        story.append(info_note)
        story.append(Spacer(1, 20))
    
    # Saut de page vers page 2 pour les commentaires et transmissions
    from reportlab.platypus import PageBreak
    if comments or forwards:
        story.append(PageBreak())
    
    # PAGE 2 : Commentaires et transmissions
    if comments:
        # Titre section commentaires
        comment_title = Paragraph('Commentaires et Annotations', title_style)
        story.append(comment_title)
        story.append(Spacer(1, 12))
        
        # Tableau des commentaires
        comment_data = [['Utilisateur', 'Type', 'Commentaire', 'Date']]
        
        for comment in comments:
            type_display = {
                'comment': 'Commentaire',
                'annotation': 'Annotation', 
                'instruction': 'Instruction'
            }.get(comment.type_comment, comment.type_comment)
            
            date_str = comment.date_creation.strftime('%d/%m/%Y %H:%M')
            if comment.date_modification:
                date_str += f" (modifi√© le {comment.date_modification.strftime('%d/%m/%Y %H:%M')})"
            
            # Style sp√©cial pour les commentaires avec meilleur contr√¥le des retours √† la ligne
            comment_text_style = ParagraphStyle(
                'CommentText',
                parent=text_style,
                wordWrap='CJK',
                splitLongWords=False,  # √âviter de couper les mots courts
                allowWidows=1,
                allowOrphans=1,
                breakLongWords=False,  # Ne pas casser les mots courts comme "commentaire"
                fontSize=9,
                leading=11
            )
            
            comment_data.append([
                Paragraph(comment.user.nom_complet, text_style),
                Paragraph(type_display, text_style),
                Paragraph(comment.commentaire, comment_text_style),
                Paragraph(date_str, text_style)
            ])
        
        comment_table = Table(comment_data, colWidths=[1.5*inch, 1.2*inch, 3.5*inch, 1.3*inch])
        comment_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.darkblue),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('WORDWRAP', (0, 0), (-1, -1), 'CJK')
        ]))
        
        story.append(comment_table)
        story.append(Spacer(1, 20))
    
    # Ajouter l'historique des transmissions si pr√©sent
    forwards = CourrierForward.query.filter_by(courrier_id=courrier.id)\
                                   .order_by(CourrierForward.date_transmission.desc()).all()
    
    if forwards:
        # Titre section transmissions
        forward_title = Paragraph('Historique des Transmissions', title_style)
        story.append(forward_title)
        story.append(Spacer(1, 12))
        
        # Tableau des transmissions avec m√™mes colonnes que commentaires
        forward_data = [['Transmis par', 'Transmis √†', 'Message', 'Date']]
        
        for forward in forwards:
            date_str = forward.date_transmission.strftime('%d/%m/%Y %H:%M')
            
            status_parts = []
            if forward.lu:
                status_parts.append(f"Lu le {forward.date_lecture.strftime('%d/%m/%Y %H:%M')}")
            else:
                status_parts.append("Non lu")
            
            if forward.email_sent:
                status_parts.append("Email envoy√©")
            
            status_str = " | ".join(status_parts)
            message_str = forward.message if forward.message else "-"
            
            # Ajouter l'information de pi√®ce jointe si pr√©sente
            if forward.attached_file and forward.attached_file_original_name:
                attachment_info = f"üìé Pi√®ce jointe: {forward.attached_file_original_name}"
                if forward.attached_file_size:
                    size_mb = forward.attached_file_size / 1024 / 1024
                    attachment_info += f" ({size_mb:.1f} MB)"
                    
                if message_str == "-":
                    message_str = attachment_info
                else:
                    message_str += f"\n{attachment_info}"
            
            # Combiner message et statut pour garder 4 colonnes comme les commentaires
            message_status = f"{message_str}"
            if status_str != "Non lu":
                message_status += f" ({status_str})"
            
            forward_data.append([
                Paragraph(forward.forwarded_by.nom_complet, text_style),
                Paragraph(forward.forwarded_to.nom_complet, text_style),
                Paragraph(message_status, text_style),
                Paragraph(date_str, text_style)
            ])
        
        forward_table = Table(forward_data, colWidths=[1.5*inch, 1.2*inch, 3.5*inch, 1.3*inch])
        forward_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgreen),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.darkgreen),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('WORDWRAP', (0, 0), (-1, -1), 'CJK')
        ]))
        
        story.append(forward_table)
        story.append(Spacer(1, 20))
    
    # Si commentaires ou transmissions √©taient sur la page 2, ajouter un saut de page avant le footer
    if comments or forwards:
        story.append(PageBreak())
    
    # Le footer est maintenant g√©r√© automatiquement par la classe NumberedCanvas
    # sur chaque page, donc on n'ajoute plus rien ici
    
    # Construire le PDF avec num√©rotation des pages
    doc.build(story, canvasmaker=NumberedCanvas)
    
    return pdf_path

def export_mail_list_pdf(courriers, filters):
    """Exporter une liste de courriers en PDF"""
    # Cr√©er le dossier exports s'il n'existe pas
    exports_dir = 'exports'
    os.makedirs(exports_dir, exist_ok=True)
    
    # Nom du fichier PDF
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"liste_courriers_{timestamp}.pdf"
    pdf_path = os.path.join(exports_dir, filename)
    
    # Cr√©er le document PDF en orientation paysage pour plus d'espace
    from reportlab.lib.pagesizes import landscape, A4
    doc = SimpleDocTemplate(pdf_path, pagesize=landscape(A4), 
                          leftMargin=0.5*inch, rightMargin=0.5*inch,
                          topMargin=0.5*inch, bottomMargin=0.5*inch)
    styles = getSampleStyleSheet()
    story = []
    
    # R√©cup√©rer les param√®tres syst√®me
    from models import ParametresSysteme
    parametres = ParametresSysteme.get_parametres()
    
    # Ajouter le logo s'il existe
    logo_path = None
    if parametres.logo_pdf:
        # Convertir l'URL relative en chemin de fichier absolu
        if parametres.logo_pdf.startswith('/uploads/'):
            logo_file_path = parametres.logo_pdf[9:]  # Enlever '/uploads/'
            logo_abs_path = os.path.join('uploads', logo_file_path)
            if os.path.exists(logo_abs_path):
                logo_path = logo_abs_path
    elif parametres.logo_url:
        # Convertir l'URL relative en chemin de fichier absolu
        if parametres.logo_url.startswith('/uploads/'):
            logo_file_path = parametres.logo_url[9:]  # Enlever '/uploads/'
            logo_abs_path = os.path.join('uploads', logo_file_path)
            if os.path.exists(logo_abs_path):
                logo_path = logo_abs_path
    
    if logo_path:
        try:
            # Charger l'image pour obtenir ses dimensions originales
            from PIL import Image as PILImage
            pil_img = PILImage.open(logo_path)
            original_width, original_height = pil_img.size
            
            # Calculer les dimensions en pr√©servant le ratio (plus petit pour liste)
            max_width = 1.2*inch
            max_height = 0.8*inch
            
            # Calculer le ratio de redimensionnement
            width_ratio = max_width / original_width
            height_ratio = max_height / original_height
            ratio = min(width_ratio, height_ratio)
            
            # Nouvelles dimensions pr√©servant le ratio
            new_width = original_width * ratio
            new_height = original_height * ratio
            
            logo = Image(logo_path, width=new_width, height=new_height)
            logo.hAlign = 'CENTER'
            story.append(logo)
            story.append(Spacer(1, 8))
        except Exception as e:
            print(f"Erreur chargement logo: {e}")  # Pour debug
    
    # Style personnalis√© pour le titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=14,
        spaceAfter=20,
        alignment=1,  # Centr√©
        textColor=colors.darkblue
    )
    
    # En-t√™te
    titre_pdf = parametres.titre_pdf or "Minist√®re des Mines"
    sous_titre_pdf = parametres.sous_titre_pdf or "Secr√©tariat G√©n√©ral"
    
    # En-t√™te pays - PREMIER √âL√âMENT
    pays_style = ParagraphStyle(
        'PaysStyle',
        parent=styles['Normal'],
        fontSize=16,
        fontName='Helvetica-Bold',
        alignment=1,  # Center
        spaceAfter=10,
        textColor=colors.darkblue
    )
    pays_text = parametres.pays_pdf or "R√©publique D√©mocratique du Congo"
    story.append(Paragraph(pays_text, pays_style))
    
    title = Paragraph(f"{titre_pdf}<br/>{sous_titre_pdf}", title_style)
    story.append(title)
    story.append(Spacer(1, 15))
    
    # Titre de la liste
    liste_title = Paragraph("LISTE DES COURRIERS", styles['Heading2'])
    story.append(liste_title)
    story.append(Spacer(1, 10))
    
    # Informations sur les filtres appliqu√©s
    filter_info = []
    if filters['search']:
        filter_info.append(f"Recherche: {filters['search']}")
    if filters['type_courrier']:
        type_display = 'Entrant' if filters['type_courrier'] == 'ENTRANT' else 'Sortant'
        filter_info.append(f"Type: {type_display}")
    if filters['statut']:
        filter_info.append(f"Statut: {filters['statut']}")
    if filters['date_from'] or filters['date_to']:
        period = "P√©riode Enr.: "
        if filters['date_from']:
            period += f"du {filters['date_from']}"
        if filters['date_to']:
            period += f" au {filters['date_to']}"
        filter_info.append(period)
    
    if filters.get('date_redaction_from') or filters.get('date_redaction_to'):
        period_red = "P√©riode R√©d.: "
        if filters.get('date_redaction_from'):
            period_red += f"du {filters['date_redaction_from']}"
        if filters.get('date_redaction_to'):
            period_red += f" au {filters['date_redaction_to']}"
        filter_info.append(period_red)
    
    if filter_info:
        filter_text = " | ".join(filter_info)
        filter_para = Paragraph(f"Filtres appliqu√©s: {filter_text}", styles['Normal'])
        story.append(filter_para)
        story.append(Spacer(1, 10))
    
    # Informations sur le rapport
    count = len(courriers)
    date_generation = format_date(datetime.now(), include_time=True)
    info_para = Paragraph(f"Total: {count} courrier{'s' if count > 1 else ''} | G√©n√©r√© le: {date_generation}", styles['Normal'])
    story.append(info_para)
    story.append(Spacer(1, 15))
    
    if not courriers:
        # Message si aucun courrier
        no_data = Paragraph("Aucun courrier trouv√© avec les crit√®res sp√©cifi√©s.", styles['Normal'])
        story.append(no_data)
    else:
        # Style pour le texte dans les cellules avec wrapping
        cell_style = ParagraphStyle(
            'CellStyle',
            parent=styles['Normal'],
            fontSize=8,
            leading=10,
            alignment=0,  # Left alignment
            leftIndent=2,
            rightIndent=2,
            spaceAfter=2
        )
        
        # Style pour les en-t√™tes
        header_style = ParagraphStyle(
            'HeaderStyle',
            parent=styles['Normal'],
            fontSize=9,
            fontName='Helvetica-Bold',
            alignment=0,  # Left alignment
            textColor=colors.whitesmoke,
            leftIndent=2,
            rightIndent=2
        )
        
        # D√©terminer si on a des courriers sortants pour ajuster le label de date
        has_sortant = any(c.type_courrier == 'SORTANT' for c in courriers)
        has_entrant = any(c.type_courrier == 'ENTRANT' for c in courriers)
        
        # Choisir le label appropri√©
        if has_sortant and not has_entrant:
            date_header = 'Date d\'√âmission'
        elif has_entrant and not has_sortant:
            date_header = 'Date de R√©daction'
        else:
            # Mix des deux types
            date_header = 'Date R√©d./√âmission'
        
        # Cr√©er le tableau des courriers avec le nouveau champ Observation
        headers = [
            Paragraph('N¬∞ Accus√© de R√©ception', header_style),
            Paragraph('Type', header_style),
            Paragraph('N¬∞ de R√©f√©rence', header_style),
            Paragraph('Contact Principal', header_style),
            Paragraph('Objet', header_style),
            Paragraph(date_header, header_style),
            Paragraph('Date d\'Enregistrement', header_style),
            Paragraph('Statut', header_style),
            Paragraph('En Copie', header_style),
            Paragraph('Observation', header_style)
        ]
        data = [headers]
        
        for courrier in courriers:
            # Contact principal selon le type - texte complet avec wrapping
            contact = courrier.expediteur if courrier.type_courrier == 'ENTRANT' else courrier.destinataire
            contact_text = contact if contact else 'Non sp√©cifi√©'
            
            # R√©f√©rence - texte complet avec wrapping
            reference_text = courrier.numero_reference if courrier.numero_reference else 'Non r√©f√©renc√©'
            
            # Objet - texte complet avec wrapping
            objet_text = courrier.objet
            
            # Date de r√©daction/√©mission format√©e
            date_redaction_str = format_date(courrier.date_redaction)
            
            # Date d'enregistrement format√©e
            date_enr_str = format_date(courrier.date_enregistrement, include_time=True).replace(' √† ', '<br/>')
            
            # Type complet
            type_text = 'Courrier Entrant' if courrier.type_courrier == 'ENTRANT' else 'Courrier Sortant'
            
            # Statut formatt√©
            statut_text = courrier.statut.replace('_', ' ')
            
            # SG en copie (pour courriers entrants)
            sg_copie_text = '-'
            if courrier.type_courrier == 'ENTRANT' and hasattr(courrier, 'secretaire_general_copie'):
                if courrier.secretaire_general_copie is not None:
                    sg_copie_text = 'Oui' if courrier.secretaire_general_copie else 'Non'
            
            # Observation - champ vide pour remplissage manuel
            observation_text = ''
            
            row = [
                Paragraph(courrier.numero_accuse_reception, cell_style),
                Paragraph(type_text, cell_style),
                Paragraph(reference_text, cell_style),
                Paragraph(contact_text, cell_style),
                Paragraph(objet_text, cell_style),
                Paragraph(date_redaction_str, cell_style),
                Paragraph(date_enr_str, cell_style),
                Paragraph(statut_text, cell_style),
                Paragraph(sg_copie_text, cell_style),
                Paragraph(observation_text, cell_style)
            ]
            data.append(row)
        
        # Cr√©er le tableau avec largeurs optimis√©es pour paysage A4 (11.69 x 8.27 inches utilisables)
        # Total width disponible: environ 10.69 inches (en retirant les marges)
        col_widths = [
            1.1*inch,   # N¬∞ Accus√© de R√©ception
            0.8*inch,   # Type  
            1.0*inch,   # N¬∞ de R√©f√©rence
            1.5*inch,   # Contact Principal
            2.5*inch,   # Objet (plus large pour le texte long)
            0.8*inch,   # Date de R√©daction/√âmission
            0.9*inch,   # Date d'Enregistrement
            0.8*inch,   # Statut
            0.6*inch,   # SG Copie
            1.4*inch    # Observation (plus d'espace)
        ]
        table = Table(data, colWidths=col_widths, repeatRows=1)
        
        # Style du tableau am√©lior√© pour une meilleure lisibilit√©
        table.setStyle(TableStyle([
            # En-t√™te
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Alignement vertical en haut
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
            ('TOPPADDING', (0, 0), (-1, 0), 8),
            ('LEFTPADDING', (0, 0), (-1, -1), 4),
            ('RIGHTPADDING', (0, 0), (-1, -1), 4),
            
            # Corps du tableau avec plus d'espace pour le texte
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
            ('TOPPADDING', (0, 1), (-1, -1), 8),
            ('ROWSIZE', (0, 1), (-1, -1), 'auto'),  # Hauteur automatique pour accommoder le texte
            
            # Bordures plus √©paisses pour la lisibilit√©
            ('GRID', (0, 0), (-1, -1), 0.8, colors.black),
            ('LINEBELOW', (0, 0), (-1, 0), 1.5, colors.darkblue),  # Ligne plus √©paisse sous l'en-t√™te
            
            # Alternance de couleur pour les lignes
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
            
            # Style sp√©cial pour la colonne Observation (derni√®re colonne)
            ('BACKGROUND', (-1, 1), (-1, -1), colors.lightyellow),  # Fond jaune clair pour Observation
            
            # Espacement entre les mots et retour √† la ligne automatique
            ('WORDWRAP', (0, 0), (-1, -1), 'CJK'),
        ]))
        
        story.append(table)
    
    story.append(Spacer(1, 20))
    
    # Pied de page
    footer_lines = []
    
    # Texte footer configurable
    if parametres.texte_footer:
        footer_lines.append(parametres.texte_footer)
    
    # Copyright crypt√©
    copyright = parametres.get_copyright_decrypte()
    footer_lines.append(copyright)
    
    for line in footer_lines:
        footer = Paragraph(line, styles['Normal'])
        story.append(footer)
        story.append(Spacer(1, 4))
    
    # Construire le PDF
    doc.build(story)
    
    return pdf_path

def send_comment_notification(email, courrier_data):
    """Envoyer un email de notification pour les commentaires/annotations/instructions"""
    try:
        # Charger les param√®tres syst√®me pour l'email
        from models import ParametresSysteme
        parametres = ParametresSysteme.get_parametres()
        if not parametres:
            logging.error("Impossible de charger les param√®tres syst√®me pour l'email")
            return False
        
        # Textes selon le type de commentaire
        type_labels = {
            'comment': 'Commentaire',
            'annotation': 'Annotation', 
            'instruction': 'Instruction'
        }
        type_label = type_labels.get(courrier_data['comment_type'], 'Commentaire')
        
        subject = f"Nouveau {type_label} - {courrier_data['numero_accuse_reception']}"
        
        # Template HTML pour l'email
        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .header {{ background-color: #003087; color: white; padding: 20px; text-align: center; }}
        .content {{ padding: 20px; }}
        .details {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 10px 0; }}
        .comment {{ background-color: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 10px 0; }}
        .footer {{ background-color: #f1f1f1; padding: 10px; text-align: center; font-size: 12px; }}
    </style>
</head>
<body>
    <div class="header">
        <h2>GEC - Nouveau {type_label}</h2>
    </div>
    <div class="content">
        <p>Bonjour,</p>
        <p>Un nouveau {type_label.lower()} a √©t√© ajout√© sur un courrier dans le syst√®me GEC.</p>
        
        <div class="details">
            <h3>D√©tails du courrier :</h3>
            <p><strong>Num√©ro d'accus√© de r√©ception :</strong> {courrier_data['numero_accuse_reception']}</p>
            <p><strong>Type :</strong> {courrier_data['type_courrier']}</p>
            <p><strong>Objet :</strong> {courrier_data['objet']}</p>
            <p><strong>Contact :</strong> {courrier_data['expediteur']}</p>
            <p><strong>{type_label} ajout√© par :</strong> {courrier_data['added_by']}</p>
        </div>
        
        <div class="comment">
            <h3>{type_label} :</h3>
            <p>{courrier_data['comment_text']}</p>
        </div>
        
        <p>Vous pouvez consulter ce courrier et r√©pondre en vous connectant au syst√®me GEC.</p>
    </div>
    <div class="footer">
        <p>GEC - Syst√®me de Gestion du Courrier<br>
        Secr√©tariat G√©n√©ral - R√©publique D√©mocratique du Congo</p>
    </div>
</body>
</html>
        """
        
        # Envoyer l'email
        from email_utils import send_email_from_system_config
        return send_email_from_system_config(email, subject, html_content)
        
    except Exception as e:
        logging.error(f"Erreur lors de l'envoi de la notification de commentaire: {e}")
        return False

def export_logs_pdf(logs, filters):
    """Exporter les logs d'activit√© en PDF avec mise en forme professionnelle"""
    # Cr√©er le dossier exports s'il n'existe pas
    exports_dir = 'exports'
    os.makedirs(exports_dir, exist_ok=True)
    
    # Nom du fichier PDF
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"logs_activite_{timestamp}.pdf"
    pdf_path = os.path.join(exports_dir, filename)
    
    # Cr√©er le document PDF en orientation paysage pour plus d'espace
    from reportlab.lib.pagesizes import landscape, A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.platypus import Image
    from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate
    from reportlab.platypus.frames import Frame
    from reportlab.pdfgen import canvas
    
    # Classe pour num√©rotation des pages et en-t√™tes/pieds de page
    class NumberedCanvas(canvas.Canvas):
        def __init__(self, *args, **kwargs):
            canvas.Canvas.__init__(self, *args, **kwargs)
            self._saved_page_states = []
            
        def showPage(self):
            self._saved_page_states.append(dict(self.__dict__))
            self._startPage()
            
        def save(self):
            """Ajouter les en-t√™tes et pieds de page sur toutes les pages"""
            num_pages = len(self._saved_page_states)
            for (page_num, page_state) in enumerate(self._saved_page_states):
                self.__dict__.update(page_state)
                self.draw_page_elements(page_num + 1, num_pages)
                canvas.Canvas.showPage(self)
            canvas.Canvas.save(self)
            
        def draw_page_elements(self, page_num, total_pages):
            """Dessiner les √©l√©ments sur chaque page"""
            from flask_login import current_user
            
            # En-t√™te
            self.setFont('Helvetica-Bold', 10)
            # Nom utilisateur en haut √† gauche
            if current_user and current_user.is_authenticated:
                self.drawString(0.5*inch, landscape(A4)[1] - 0.3*inch, 
                              f"Utilisateur: {current_user.nom_complet}")
            
            # Date et heure en haut √† droite
            self.drawRightString(landscape(A4)[0] - 0.5*inch, landscape(A4)[1] - 0.3*inch,
                               f"Date d'export: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
            
            # Pied de page
            self.setFont('Helvetica', 8)
            # Num√©rotation des pages au centre
            self.drawString(landscape(A4)[0]/2 - 30, 0.3*inch, 
                           f"Page {page_num} sur {total_pages}")
            
            # Copyright en bas √† droite
            from models import ParametresSysteme
            parametres = ParametresSysteme.get_parametres()
            copyright = parametres.get_copyright_decrypte() if parametres else "¬© GEC System"
            self.drawRightString(landscape(A4)[0] - 0.5*inch, 0.3*inch, copyright)
    
    doc = SimpleDocTemplate(pdf_path, pagesize=landscape(A4), 
                          leftMargin=0.5*inch, rightMargin=0.5*inch,
                          topMargin=0.75*inch, bottomMargin=0.75*inch)
    styles = getSampleStyleSheet()
    story = []
    
    # R√©cup√©rer les param√®tres syst√®me
    from models import ParametresSysteme
    parametres = ParametresSysteme.get_parametres()
    
    # Ajouter le logo s'il existe
    logo_path = None
    if parametres.logo_pdf:
        if parametres.logo_pdf.startswith('/uploads/'):
            logo_file_path = parametres.logo_pdf[9:]
            logo_abs_path = os.path.join('uploads', logo_file_path)
            if os.path.exists(logo_abs_path):
                logo_path = logo_abs_path
    elif parametres.logo_url:
        if parametres.logo_url.startswith('/uploads/'):
            logo_file_path = parametres.logo_url[9:]
            logo_abs_path = os.path.join('uploads', logo_file_path)
            if os.path.exists(logo_abs_path):
                logo_path = logo_abs_path
    
    if logo_path:
        try:
            from PIL import Image as PILImage
            pil_img = PILImage.open(logo_path)
            original_width, original_height = pil_img.size
            
            # Calculer les dimensions en pr√©servant le ratio
            max_width = 1.5*inch
            max_height = 1.0*inch
            
            width_ratio = max_width / original_width
            height_ratio = max_height / original_height
            ratio = min(width_ratio, height_ratio)
            
            new_width = original_width * ratio
            new_height = original_height * ratio
            
            logo = Image(logo_path, width=new_width, height=new_height)
            logo.hAlign = 'CENTER'
            story.append(logo)
            story.append(Spacer(1, 10))
        except Exception as e:
            print(f"Erreur chargement logo: {e}")
    
    # Style personnalis√© pour le titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=20,
        alignment=1,  # Centr√©
        textColor=colors.darkblue,
        fontName='Helvetica-Bold'
    )
    
    # En-t√™te pays
    pays_style = ParagraphStyle(
        'PaysStyle',
        parent=styles['Normal'],
        fontSize=18,
        fontName='Helvetica-Bold',
        alignment=1,
        spaceAfter=10,
        textColor=colors.darkblue
    )
    pays_text = parametres.pays_pdf or "R√©publique D√©mocratique du Congo"
    story.append(Paragraph(pays_text, pays_style))
    
    # Titre et sous-titre
    titre_pdf = parametres.titre_pdf or "Minist√®re des Mines"
    sous_titre_pdf = parametres.sous_titre_pdf or "Secr√©tariat G√©n√©ral"
    
    title = Paragraph(f"{titre_pdf}<br/>{sous_titre_pdf}", title_style)
    story.append(title)
    story.append(Spacer(1, 20))
    
    # Titre du rapport
    rapport_title = Paragraph("JOURNAL DES ACTIVIT√âS SYST√àME", styles['Heading2'])
    story.append(rapport_title)
    story.append(Spacer(1, 15))
    
    # Informations sur les filtres appliqu√©s
    filter_info = []
    if filters.get('search'):
        filter_info.append(f"Recherche textuelle: {filters['search']}")
    if filters.get('action_filter'):
        filter_info.append(f"Action filtr√©e: {filters['action_filter']}")
    if filters.get('user_filter'):
        from models import User
        user = User.query.get(filters['user_filter'])
        if user:
            filter_info.append(f"Utilisateur: {user.nom_complet}")
    if filters.get('date_from') or filters.get('date_to'):
        period = "P√©riode: "
        if filters.get('date_from'):
            period += f"du {filters['date_from']}"
        if filters.get('date_to'):
            period += f" au {filters['date_to']}"
        filter_info.append(period)
    
    if filter_info:
        filter_style = ParagraphStyle(
            'FilterStyle',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=15,
            textColor=colors.grey
        )
        filter_text = " | ".join(filter_info)
        story.append(Paragraph(f"<b>Filtres appliqu√©s:</b> {filter_text}", filter_style))
    
    # Statistiques rapides
    total_logs = len(logs)
    actions_uniques = len(set(log.action for log in logs))
    utilisateurs_uniques = len(set(log.utilisateur_id for log in logs))
    
    stats_style = ParagraphStyle(
        'StatsStyle',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=15,
        textColor=colors.darkgreen
    )
    stats_text = f"<b>Statistiques:</b> {total_logs} entr√©es | {actions_uniques} types d'actions | {utilisateurs_uniques} utilisateurs actifs"
    story.append(Paragraph(stats_text, stats_style))
    story.append(Spacer(1, 10))
    
    # Construire le tableau des logs
    if logs:
        # En-t√™tes du tableau
        headers = [
            'Date/Heure',
            'Utilisateur', 
            'Action',
            'Description',
            'IP',
            'Courrier'
        ]
        
        # Donn√©es du tableau
        data = [headers]
        
        for log in logs:
            # Formatage de la date
            date_str = log.date_action.strftime('%d/%m/%Y\n%H:%M:%S') if log.date_action else ''
            
            # Nom utilisateur
            user_name = log.utilisateur.nom_complet if log.utilisateur else 'Inconnu'
            
            # Action
            action = log.action or ''
            
            # Description (limit√©e et avec retour √† la ligne)
            description = log.description or ''
            if len(description) > 80:
                description = description[:77] + '...'
            
            # IP
            ip = log.ip_address or ''
            
            # Courrier (si applicable)
            courrier_info = ''
            if log.courrier_id and log.courrier:
                courrier_info = f"#{log.courrier.numero_accuse_reception}"
            
            row = [
                Paragraph(date_str, styles['Normal']),
                Paragraph(user_name, styles['Normal']),
                Paragraph(action, styles['Normal']),
                Paragraph(description, styles['Normal']),
                Paragraph(ip, styles['Normal']),
                Paragraph(courrier_info, styles['Normal'])
            ]
            data.append(row)
        
        # Largeurs des colonnes optimis√©es pour paysage
        col_widths = [
            1.2*inch,   # Date/Heure
            1.4*inch,   # Utilisateur
            1.3*inch,   # Action
            3.5*inch,   # Description (plus large)
            1.0*inch,   # IP
            1.0*inch    # Courrier
        ]
        table = Table(data, colWidths=col_widths, repeatRows=1)
        
        # Style du tableau professionnel
        table.setStyle(TableStyle([
            # En-t√™te
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 8),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            
            # Corps du tableau
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
            ('TOPPADDING', (0, 1), (-1, -1), 8),
            
            # Bordures
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('LINEBELOW', (0, 0), (-1, 0), 2, colors.darkblue),
            
            # Alternance de couleur pour lisibilit√©
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
            
            # Styles sp√©ciaux par colonne
            ('BACKGROUND', (0, 1), (0, -1), colors.lightblue),  # Date/Heure
            ('BACKGROUND', (2, 1), (2, -1), colors.lightyellow),  # Action
            
            # Retour √† la ligne automatique
            ('WORDWRAP', (0, 0), (-1, -1), 'CJK'),
        ]))
        
        story.append(table)
    else:
        # Message si aucun log
        no_data_style = ParagraphStyle(
            'NoDataStyle',
            parent=styles['Normal'],
            fontSize=12,
            alignment=1,
            textColor=colors.red
        )
        story.append(Paragraph("Aucun log d'activit√© trouv√© avec les crit√®res s√©lectionn√©s.", no_data_style))
    
    story.append(Spacer(1, 20))
    
    # Construire le PDF avec num√©rotation des pages
    doc.build(story, canvasmaker=NumberedCanvas)
    
    return pdf_path
